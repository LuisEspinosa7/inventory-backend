--### INVENTARTIO APP WEB APP ####

-- Connect as inventoryadmin

-- TABLES CREATION
CREATE TABLE IF NOT EXISTS app.roles (
	role_id serial PRIMARY KEY,
	role_name VARCHAR (50) UNIQUE NOT NULL,
	role_description VARCHAR (100) NOT NULL
);

CREATE TABLE IF NOT EXISTS app.users (
	use_id serial PRIMARY KEY,
    use_document VARCHAR (20) UNIQUE NOT NULL,
	use_name VARCHAR (50) NOT NULL,
    use_lastname VARCHAR (50) NOT NULL,
    use_username VARCHAR (50) UNIQUE NOT NULL,
    use_password VARCHAR (60) NOT NULL
);

CREATE TABLE IF NOT EXISTS app.permissions (
	use_id int NOT NULL,
	role_id int NOT NULL,
    FOREIGN KEY (use_id)
      REFERENCES app.users (use_id),
    FOREIGN KEY (role_id)
      REFERENCES app.roles (role_id)
);

CREATE TABLE IF NOT EXISTS app.categories (
	cat_id serial PRIMARY KEY,
	cat_name VARCHAR (50) UNIQUE NOT NULL,
    cat_status INT NOT NULL
);

CREATE TABLE IF NOT EXISTS app.products (
	prod_id bigserial PRIMARY KEY,
	prod_name VARCHAR (200) UNIQUE NOT NULL,
    prod_price NUMERIC(10, 2) NOT NULL,
    prod_quantity INT NOT NULL,
    cat_id INT NOT NULL,
    prod_status INT NOT NULL,
    FOREIGN KEY (cat_id)
      REFERENCES app.categories (cat_id)
);


CREATE TABLE IF NOT EXISTS app.movements (
	mov_id bigserial PRIMARY KEY,
	mov_timestamp TIMESTAMP,
    mov_type VARCHAR(20) NOT NULL,
    use_id INT NOT NULL,
    mov_code VARCHAR (50) UNIQUE NOT NULL,
    FOREIGN KEY (use_id)
      REFERENCES app.users (use_id)
);

CREATE TABLE IF NOT EXISTS app.movement_details (
	mod_id bigserial PRIMARY KEY,
	mov_id INT NOT NULL,
    prod_id INT NOT NULL,
    mod_quantity INT NOT NULL,
    FOREIGN KEY (mov_id)
      REFERENCES app.movements (mov_id),
    FOREIGN KEY (prod_id)
      REFERENCES app.products (prod_id)
);




CREATE TABLE app.audit_log (
    username text, -- who did the change
    time_utc timestamp, -- when the event was recorded
    table_name text, -- contains schema-qualified table name
    operation text, -- INSERT, UPDATE, DELETE or TRUNCATE
    before_value json, -- the OLD tuple value
    after_value json -- the NEW tuple value
);


CREATE OR REPLACE FUNCTION app.audit_trigger() 
  RETURNS trigger AS $$ 
DECLARE 
    old_row json := NULL; 
    new_row json := NULL; 
BEGIN 
    IF TG_OP IN ('UPDATE','DELETE') THEN 
        old_row = row_to_json(OLD); 
    END IF; 
    IF TG_OP IN ('INSERT','UPDATE') THEN 
        new_row = row_to_json(NEW); 
    END IF; 
    INSERT INTO  app.audit_log( 
        username, 
        time_utc, 
        table_name, 
        operation, 
        before_value, 
        after_value 
    ) VALUES ( 
        session_user, 
        current_timestamp AT TIME ZONE 'UTC', 
        TG_TABLE_SCHEMA ||  '.' || TG_TABLE_NAME, 
        TG_OP, 
        old_row, 
        new_row 
    ); 
    RETURN NEW; 
END; 
$$ LANGUAGE plpgsql;



CREATE TRIGGER audit_log 
  AFTER INSERT OR UPDATE OR DELETE 
  ON app.movements 
  FOR EACH ROW 
EXECUTE PROCEDURE app.audit_trigger();

CREATE TRIGGER products_audit_log 
  AFTER INSERT OR UPDATE OR DELETE 
  ON app.products 
  FOR EACH ROW 
EXECUTE PROCEDURE app.audit_trigger();


-- INIT DATA

INSERT INTO app.roles(role_name, role_description) VALUES('ADMIN', 'CREATE USERS, PRODUCTS, CATEGORIES, BUT CAN NOT MAKE PRODUCT MOVEMENTS');
INSERT INTO app.roles(role_name, role_description) VALUES('SUPERVISOR', 'CAN NOT CREATE BUT CAN CREATE PRODUCTS, CATEGORIES AND MAKE PRODUCT MOVEMENTS');

INSERT INTO app.users(use_document, use_name, use_lastname, use_username, use_password, use_status) 
    VALUES('3333333333', 'Luis', 'Espinosa', 'LUIS3', '$2a$10$begExMKlRQ8aFFx1fRV64Ogbm7J3KuAQzuYlnhM0gnNvzUSrxz5DS', 1);

INSERT INTO app.users(use_document, use_name, use_lastname, use_username, use_password, use_status) 
    VALUES('4444444444', 'Valentina', 'Espinosa', 'VALEN4', '$2a$10$begExMKlRQ8aFFx1fRV64Ogbm7J3KuAQzuYlnhM0gnNvzUSrxz5DS', 1);

INSERT INTO app.permissions(use_id, role_id) VALUES(1, 1);
INSERT INTO app.permissions(use_id, role_id) VALUES(2, 2);

INSERT INTO app.categories(cat_name) VALUES('TECHNOLOGY', 1);
INSERT INTO app.categories(cat_name) VALUES('FOOD', 1);
INSERT INTO app.categories(cat_name) VALUES('CLOTHES', 1);
INSERT INTO app.categories(cat_name) VALUES('COMMON', 1);
INSERT INTO app.categories(cat_name) VALUES('MUSIC', 1);
INSERT INTO app.categories(cat_name) VALUES('BOOKS', 1);

INSERT INTO app.products(prod_name, prod_price, prod_quantity, cat_id) 
    VALUES('MacBook Pro 2019 intel i9', 9000000.00, 5, 1, 1);
INSERT INTO app.products(prod_name, prod_price, prod_quantity, cat_id) 
    VALUES('MacBook Pro 2020 M1 16Gb 1TB', 11000000.00, 7, 1, 1);
INSERT INTO app.products(prod_name, prod_price, prod_quantity, cat_id) 
    VALUES('MacBook Pro 2020 M1 PRO 16Gb 1TB', 15000000.00, 2, 1, 1);
INSERT INTO app.products(prod_name, prod_price, prod_quantity, cat_id) 
    VALUES('MacBook Pro 2020 M1 MAX 16Gb 1TB', 17000000.00, 2, 1, 1);

INSERT INTO app.products(prod_name, prod_price, prod_quantity, cat_id) 
    VALUES('Harry Potter and the sorcerers stone', 50000.00, 5, 6, 1);
INSERT INTO app.products(prod_name, prod_price, prod_quantity, cat_id) 
    VALUES('Harry Potter and the chamber of secrets', 55000.00, 2, 6, 1);

    


--- MOVEMENTS
INSERT INTO app.movements(mov_timestamp, mov_type, use_id, mov_code) 
    VALUES (NOW(), 'INPUT', 1, '22260ef0-cb22-11ec-9d64-0242ac120002');

--- MOVEMENTS DETAIL
INSERT INTO app.movement_details(mov_id, prod_id, mod_quantity) 
    VALUES(1, 1, 5);





--- DATA FOR TESTING

-- ADMIN
INSERT INTO app.users(use_document, use_name, use_lastname, use_username, use_password, use_status) 
    VALUES('5555555555', 'Pedro', 'Gomez', 'PEDRO5', '$2a$10$begExMKlRQ8aFFx1fRV64Ogbm7J3KuAQzuYlnhM0gnNvzUSrxz5DS', 1);

-- SUPERVISOR
INSERT INTO app.users(use_document, use_name, use_lastname, use_username, use_password, use_status) 
    VALUES('6666666666', 'Julieta', 'Sanchez', 'JULI6', '$2a$10$begExMKlRQ8aFFx1fRV64Ogbm7J3KuAQzuYlnhM0gnNvzUSrxz5DS', 1);

INSERT INTO app.permissions(use_id, role_id) VALUES(4, 1);
INSERT INTO app.permissions(use_id, role_id) VALUES(5, 2);